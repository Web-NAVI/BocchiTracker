@page "/config/ticket"
@layout ConfigLayout
@using System.Windows.Input
@using Reactive.Bindings
@using BocchiTracker.Client.Config.Controls
 @using BocchiTracker.Client.Config.ViewModels

<MudExpansionPanels>
    <MudExpansionPanel Text="Ticket Types">
        <div class="inputWithButton">
            <MudTextField T="string"
                          Placeholder="Ticket types" @bind-Value="@TicketTypesInput" />
            <div class="buttonVerticalAlignment">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="(() => OnAddItem(TicketTypesInput))">
                    <MudIcon Icon="@Icons.Material.Filled.Add" Title="Favorite" />
                </MudButton>
            </div>
        </div>
        <MudTable Style="margin-top:16px;" Items="@TicketTypes.ValueMappings" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Remove</MudTh>
                <MudTh>Definition</MudTh>
                <MudTh>Redmine</MudTh>
                <MudTh>GitHub</MudTh>
                <MudTh>Slack</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nr">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" />
                </MudTd>
                <MudTd DataLabel="Sign">@context.Definition.Value</MudTd>
                <MudTd DataLabel="Name">
                    <MudTextField @bind-Value="@context.Redmine.Value" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudTd>
                <MudTd DataLabel="Name">
                    <MudTextField @bind-Value="@context.Github.Value" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudTd>
                <MudTd DataLabel="Name">
                    <MudTextField @bind-Value="@context.Slack.Value" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Priorities">
        Panel Two Content
    </MudExpansionPanel>
    <MudExpansionPanel Text="Issue Grades">
        Panel Three Content
    </MudExpansionPanel>
    <MudExpansionPanel Text="Query fields">
        Panel Four Content
    </MudExpansionPanel>
</MudExpansionPanels>


<style>
    .inputWithButton {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 1rem;
    }

    .buttonVerticalAlignment {
        gap: 1rem;
        display: flex;
        align-items: end;
        /* padding-bottom: 1.6em; */
    }

</style>

@code {
    @inject CachedConfigRepository<ProjectConfig> _projectConfigrepository
    @inject NavigationManager _nav
    @implements IDisposable

    public ValueMapBase TicketTypes { get; set; } = new ValueMapBase();
    public ValueMapBase Priorities { get; set; } = new ValueMapBase();
    public ValueMapBase IssueGrades { get; set; } = new ValueMapBase();
    public ValueMapBase QueryFields { get; set; } = new ValueMapBase();

    public ReactiveCollection<ServiceValueMapping> ValueMappings { get; set; } = new ReactiveCollection<ServiceValueMapping>();

    string TicketTypesInput = "";

    public void OnAddItem(string inValue)
    {
        if (string.IsNullOrEmpty(inValue))
            return;
        if (Find(inValue) != null)
            return;
        ValueMappings.Add(new ServiceValueMapping(inValue));
    }

    public void OnRemoveItem(string inValue)
    {
        var itemToRemove = Find(inValue);
        if (itemToRemove != null)
            ValueMappings.Remove(itemToRemove);
    }



    public ServiceValueMapping Find(string inValue)
    {
        return ValueMappings.FirstOrDefault(kvp => kvp.Definition.Value == inValue);
    }

    protected override void OnInitialized()
    {
        _nav.LocationChanged += HandleLocationChanged;
        OnConfigReload();
        base.OnInitialized();
    }

    void OnConfigReload()
    {
        var projectConfig = _projectConfigrepository.Load();
        TicketViewModel.OnConfigReloadCommon(projectConfig, TicketTypes, Priorities, IssueGrades, QueryFields);
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e) => OnSaveConfig();

    void OnSaveConfig()
    {
        var projectConfig = _projectConfigrepository.Load();
        TicketViewModel.OnSaveConfigCommon(projectConfig, TicketTypes, Priorities, IssueGrades, QueryFields);
    }

    public void Dispose()
    {
        _nav.LocationChanged -= HandleLocationChanged;

    }
}
