@page "/"
@layout EmptyLayout
@inject CachedConfigRepository<ProjectConfig> _configRepo
@using BocchiTracker.Config
@using BocchiTracker.Config.Configs
@using MudBlazor;

<div class="screenCenter">
    <MudPaper>
        <MudCard>
            <MudCardContent Style="width:400px;">
                <MudText Typo="Typo.h6">Select a config</MudText>
                <MudText Typo="Typo.subtitle1">To create new config enter a name that is not in the list</MudText>
                <MudAutocomplete T="string"
                                 SelectValueOnTab=true
                                 Clearable=true
                                 Label="Config name"
                                 CoerceText=true CoerceValue=true
                                 SearchFunc="@Search"
                                 AutoFocus=false
                                 @bind-Value="SelectedValue"
                                 ResetValueOnEmptyText="@true" />
            </MudCardContent>
            <MudCardActions Style="justify-content:end;">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Disabled=@string.IsNullOrWhiteSpace(SelectedValue)>
                    Submit
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudPaper>
</div>

<style>
    .screenCenter {
        width: 100vw;
        height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
</style>

@code
{
    string SelectedValue = "";

    protected override void OnInitialized()
    {
        OnDialogOpened();
        base.OnInitialized();
    }

    private async Task<IEnumerable<string>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return ItemsSource;
        return ItemsSource.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }


    #region WPF ConfigFilePicker
    public string ProjectConfigDirectory => Path.Combine("Configs", "ProjectConfigs");

    public List<string> ItemsSource { get; set; } = new List<string>();

    void OnSubmit()
    {
        //var filename = r.Parameters.GetValue<string>("Config");

        _configRepo.SetLoadFilename(SelectedValue);
    }

    public void OnDialogOpened()
    {
        //EnableFileCreation.Value = parameters.GetValue<bool>("EnableFileCreation");
        // HintText.Value = EnableFileCreation.Value
        //   ? "Enter a new config or choose a config to edit"
        //  : "Chose a config to use";

        if (Directory.Exists(ProjectConfigDirectory))
        {
            var configs = Directory.GetFiles(ProjectConfigDirectory, "*.yaml");
            foreach (var config in configs)
            {
                ItemsSource.Add(Path.GetFileNameWithoutExtension(config));
            }
        }
    }
    #endregion
}